sapply(s, f) > sapply(s, g)
g = function(x) 1/(2*x^4)
sapply(s, f) > sapply(s, g)
cos(1:10)
plot(cos(1:10))
plot(cos(1:100))
plot(cos(1:100), type = "l")
?sample
X <- 4
x <= 2
x <- 2
x
X
f <- function(N,M) M*(1 - ((M-1)/M)^N)
f(100, 1)
f(100, 2)
f(100, 3)
f(100, 4)
f(100, 50)
f(100, 20)
f(100, 1000)
f(100, 100000)
f <- function(N,M) M*(1 - ((M-1)/M)^N)
f(1, 100)
f(1, 10000)
f(1, 1)
f(1, 10)
f(2, 1)
f(2, 1)
f(2, 2)
f(1000, 5)
f(1000, 6)
f(1000, 1000)
a <- sapply(10000:11000, function(x){
x**2
})
a
sample(c(rep(0, 40), rep(1, 35), rep(2, 20), rep(3, 5)), 1)
sample(c(rep(0, 40), rep(1, 35), rep(2, 20), rep(3, 5)), 1)
sample(c(rep(0, 40), rep(1, 35), rep(2, 20), rep(3, 5)), 1)
sample(c(rep(0, 40), rep(1, 35), rep(2, 20), rep(3, 5)), 1)
genZ <- function(){
sample(c(rep(0, 40), rep(1, 35), rep(2, 20), rep(3, 5)), 1)
}
arr <- sapply(10000:11000, function(x){
xn <- x
t <- 0
while(xn > 0){
xn <- x - 1 + genZ()
t <- t+1
}
return t/x
})
genZ <- function(){
sample(c(rep(0, 40), rep(1, 35), rep(2, 20), rep(3, 5)), 1)
}
arr <- sapply(10000:11000, function(x){
xn <- x
t <- 0
while(xn > 0){
xn <- x - 1 + genZ()
t <- t+1
}
t/x
})
genZ <- function(){
sample(c(rep(0, 40), rep(1, 35), rep(2, 20), rep(3, 5)), 1)
}
arr <- sapply(10900:11000, function(x){
xn <- x
t <- 0
while(xn > 0){
xn <- x - 1 + genZ()
t <- t+1
}
t/x
})
genZ <- function(){
sample(c(rep(0, 40), rep(1, 35), rep(2, 20), rep(3, 5)), 1)
}
arr <- sapply(10900:11000, function(x){
xn <- x
t <- 0
while(xn > 0){
xn <- xn - 1 + genZ()
t <- t+1
}
t/x
})
arr <- sapply(10900:11000, function(x){
xn <- x
t <- 0
while(xn > 0){
xn <- xn - 1 + sample(c(rep(0, 40), rep(1, 35), rep(2, 20), rep(3, 5)), 1)
t <- t+1
}
t/x
})]
plot(arr)
abline(h=10)
arr <- sapply(10900:11000, function(x){
xn <- x
t <- 0
while(xn > 0){
xn <- xn - 1 + sample(c(rep(0, 40), rep(1, 35), rep(2, 20), rep(3, 5)), 1)
t <- t+1
}
t/x
})]
plot(arr)
abline(h=10)
arr <- sapply(10900:11000, function(x){
xn <- x
t <- 0
while(xn > 0){
xn <- xn - 1 + sample(c(rep(0, 40), rep(1, 35), rep(2, 20), rep(3, 5)), 1)
t <- t+1
}
t/x
})
plot(arr)
abline(h=10)
A <- matrix(c(1,2,3,4), nrow = 2)
A
A %*% A
n <- A
for(i in 1:100){
n <- n %*% A
}
n
x = runif(100)
y = runif(100)
abs(sqrt(x) - sqrt(y)) < abs(x - y)
abs(sqrt(x) - sqrt(y)) <= abs(x - y)
x[33]
y[33]
sqrt(x[33]) - sqrt(y[33])
x - y
sqrt(x[33]) - sqrt(y[33])
x[33] - y[33]
plot(x, sqrt(x))
abs(sqrt(x) - sqrt(y))
abs(sqrt(x) - sqrt(y)) < abs(x-y)
x[65]
y[65]
abs(sqrt(x[65]) - sqrt(y[65]))
abs(x - y)
abs(sqrt(x[65]) - sqrt(y[65]))
abs(x[65] - y[65])
x
abs(x**1.1 - y**1.1 < abs(x-y)
abs(x**1.1 - y**1.1 < abs(x-y))
abs(x**1.1 - y**1.1) < abs(x-y)
library(gbm)
?gbm
?gbm
?filled.contour
example(filled.contour)
volcano
head(volcano)
Sigma <- matrix(c(1,0,0,0), nrow = 2)
Sigma
Sigma <- matrix(c(1,0,0,0), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
f(1,1)
f(1,2)
f(1,10)
f(1,1000)
f(x=1,y=1000)
combn(x, y)
?combn
z <- matrix(0, nrow = length(x))
z
head(z)
Sigma <- matrix(c(1,0,0,0), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = 0, to = 2, by = .01)
y <- seq(from = 0, to = 2, by = .01)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,0,0,0), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = 0, to = 5, by = .01)
y <- seq(from = 0, to = 5, by = .01)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
x <- seq(from = 0, to = 5, by = .01)
y <- seq(from = 0, to = 5, by = .01)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .01)
y <- seq(from = -1, to = 1, by = .01)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,0,4,0), nrow = 2)
Sigma
Sigma <- matrix(c(1,4,0,0), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .01)
y <- seq(from = -1, to = 1, by = .01)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,4,0,0), nrow = 2)
Sigma
Sigma <- matrix(c(1,0,4,0), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .01)
y <- seq(from = -1, to = 1, by = .01)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,0,4,0), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,4,0,0), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,4,0,0), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,4,0,0), nrow = 2)
Sigma
Sigma <- matrix(c(1,4,0,1), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,4,2,1), nrow = 2)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,0,0,1), nrow = 2, byrow = T)
Sigma
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[i])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,0,0,1), nrow = 2, byrow = T)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[j])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,4,0,0), nrow = 2, byrow = T)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[j])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,0,4,0), nrow = 2, byrow = T)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[j])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,0,
0,0),
nrow = 2, byrow = F)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[j])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,1,
1,0),
nrow = 2, byrow = F)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[j])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(2,4,
4,8),
nrow = 2, byrow = F)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[j])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,0,
0,0),
nrow = 2, byrow = F)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[j])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,0,
2,0),
nrow = 2, byrow = F)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[j])
}
}
filled.contour(x, y, z)
Sigma <- matrix(c(1,2,
2,4),
nrow = 2, byrow = F)
f <- function(x, y){
exp(-.5*(Sigma[1,1]*x**2 + (Sigma[1,2] + Sigma[2,1])*x*y + Sigma[2,2]*y**2))
}
x <- seq(from = -1, to = 1, by = .1)
y <- seq(from = -1, to = 1, by = .1)
z <- matrix(0, nrow = length(y), ncol = length(x))
for (i in 1:nrow(z)){
for (j in 1:ncol(z)){
z[i,j] <- f(x[i], y[j])
}
}
filled.contour(x, y, z)
a <- mean(c(1,2,3))
# adapted from Andrew Brooks
# (http://brooksandrew.github.io/simpleblog/articles/blogging-with-r-markdown-and-jekyll-using-knitr/)
KnitPost <- function(site.path='~/Documents/Projects/llefebure.github.io/', rmd.path='',
overwriteAll=F, overwriteOne=NULL) {
if(!'package:knitr' %in% search()) library('knitr')
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0('~/Documents/Projects/llefebure.github.io/_R/', rmd.path)
fig.dir <- "assets/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
}
KnitPost(rmd.path = "reddit-cl")
